@ то же самое что и HEAD
git checkout -b newBranch - создание и переход в новую ветку под названием newBranch
Другой способ указать ветке отслеживать удалённую ветку — это просто использовать команду git branch -u. Выполнив команду
git branch -u o/main foo
git checkout -b side o/main;

Создать новую ветку, произвести там какие-то изменения и слить её с основной:
git checkout -b bugFix
git commit "bugFix commit"
git checkout main
git commit "commit on branch main"
git merge bugFix

Вместо merge лучше исопльзовать rebase.

git branch -f main C6 - влить ветку main в С6
git branch -f main HEAD~3 - влить ветку main на 3 шага назад от HEAD

git checkout C1 - теперь HEAD указывает на С1

Git reset или git revert? Git reset - для локальных файлов! Т.е. для тех файлов которые мы проиндексировали(git add .). Если мы проиндексировали и сделали commit, то используем git revert, 
создает ещё 1 комиит, противоположный тому что был.
git revert - смотрти какие изменения в указаном коммите и создает коммит с новым измением.

git cherry-pick <Commit1> <Commit2> <...> - можно перенести точно известные коммиты в какое-то место.
git rebase -i HEAD~4 - тоже что и cherry-pick олько указываем коммиты, которые не надо переносить

git tag названиеТега названиеКоммитаККоторому применить тег - тег ссылается все время на один и тот же коммит
git describe - показывает как далеко команда от текущего тега. Git describe помогает ориентироваться когда нужно откатиться на много комиитов назад. Теги просматриваются только 
назад во времени. Теги более новых коммитов чем заданный недоступны и не нужны.

git fetch origin main:foo - берем из удаленного репозитория ветку main и переносим её в foo(ветка foo в локальном репозитории).
git fetch origin main~1:foo - берем из репозитория ветку main предпослдний коммит
В чем отличие git pull от git fetch?
git fetch - сливает все данные из проекта котрые находятся в репозитории(данных которых нет). Никаких изменений не применяет в ветке. Её можно импользовать безбоязненно что
что-то сломается
git merge- использкется после git fetch. Померджило те изменения котрые слили из глобальной ветки в локальную ветку. 
git pull = git fetch + get merge. Нужна чтобы забрать изменения в репозитории. Т.е. мы скопировали проект, что-то деалали 1 день. Потом решили влить свои иземения. Но перед
этим надо влить в проект все измения других(самая последняя версия проекта) а потом прикрепить к этим изменениям свои.
git pull origin foo это то же самое, что сделать:
git fetch origin foo; git merge o/foo
git push origin develop - всегда пушит в ветку с таким же именем на сервере. Сначала делаем pull. Потом делаем push.
git push origin main:foo - foo это пункт назанчения

git pull --rebase - аналог pull+rebase. git fetch; git rebase main;git rebase C3; git rebase -i o/main; git push

git fakeTeamwork - создать коммит в репозитории главном. Не на компе своем, а на сервере.

pull request - запрос на слияние. Вместо обычногь push. Чтобы проверили другие программисты. Merge происходит после того, как проверят другие программисты.

git reset --hard o/main - отмена коммита последнего
git checkout -b feature C2 - создание новой ветки
git push origin feature