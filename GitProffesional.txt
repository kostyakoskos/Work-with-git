https://habr.com/ru/company/intel/blog/344962/

1. Какая разница между жесткой и символической ссылкой? Жесткая ссылка копирует сам объект сохраняя его где-то, а символическаяя копирует только ссылку на него.
echo "111" > a
ln a b // жесткая ссылка b
ln -s a c // сиволическая ссылка с
rm a
cat a --> No such file or directory
cat b --> 111
cat c --> No such file or directory

2. Git merge vs git rebase.
Git rebase. Пусть есть коммит а, b. скопируем эту ветку, что -то сделаем c1,d1,e1 коммиты. В это время в основной ветке сделают коммит f,g. Делаем rebase - после этого в основной ветке
появляются коммиты c1,d1,e1. Основная ветка: a,b,f,g,c1,d1,e1. 
Git merge. Вливаем master в feture. т.е. скопировали, добавили коммиты в ветку от куда скопировали.
Минусы rebase. 1)Если 2 разработчика работают над 1-й веткой. Общее правило. Если ветка находится только на локальном компьютере, то rebase делать нужно. Если ветка находится в 
публичном доступе, то делать rebase нельзя! 2) Сделали rebase. В это время како-то другой коллега изменил название используемой ф-ции. Теперь программа работать не будет, т.к. ф-ция 
переименована, а мы её вызыаем под старым именем. Проблема возникает довольно редко. Избежать такие ситуации можно с помощью автоматизированных тестов. rebase -x.
Итерактивное перебазирование. get rebase -i

Git reset или git revert? Git reset - для локальных файлов! Т.е. для тех файлов которые мы проиндексировали(git add .). Если мы проиндексировали и сделали commit, то используем git revert, 
создает ещё 1 комиит, противоположный тому что был.


Git предоставляет свое содержимое в виде блобов.
blobs - узлы-листьями в структуре, очень похожей на директорию и называемой деревом. У каждого блоба
есть уникальный номер, присвоенный системой. Номер система присваивает вычисляя хеш(sha-1) файла от его размера и содержания. Зачем надо вычислять хэш? Чтобы гарантировать
что содержимое узла не изменилось, и оно уникальное даже на просторах интернета.
Хард-линк - фрагмент не исчезнет до тех пор, пока на него есть ссылка.
Все объекты с одинаковым содержимым будут общими в независимости от их местонахождения(общйи размер и содержимое => хеш).
Два дерева могут использовать одинаковый фрагмент, блоб
commit хранит свой id, блоб(тип), хэш-элемента(блоб), название файла.
ls-tree HEAD - посмотреть все дерево.
Каждый коммит содержит единственное дерево.
Дерево содержащее одни и те же фрагменты будет иметь одинаковый хеш.

Индексация файла. Выполняется на этапе git add . На этапе индексации вычисляется хэш и гит работает с id блоба(хешем).
. or * - * Точка отличается от звездочки тем, что точка отпраялет на индексацию только те файлы, которые находятся в текущей директории.